export let Array = .{
  // Returns the length of an array
  len: func pure len(value: array?) {
    let res = 0;
    for i in value { res = res + 1; };
    res;
  },

  // Adds an item to the end of the array
  push: func pure push(arr: array?, value) {
    arr + value;
  },

  // Joins an array into a string with an optional seperator
  join: func pure join(values: array?, by: null_or?(string?)) {
    let value = "";

    for i in values {
      value = value + ("" + i) + (by is null? ? "" : by);
    }

    value;
  },

  // Creates a new array based on another array but calling f with each item
  map: func pure map(value: array?, f: callable?) {
    for i in value { f(i); };
  },

  // Reverses the items in an array
  reverse: func pure reverse(array: array?) {
    // Check if empty array
    if Array.len(array) == 0 { return array; }

    let new_array = [];

    for i in Array.len(array)-1..0 {
      new_array + array[i];
    }

    new_array;
  },

  // Checks if two arrays contain the exact same elements, this is because
  // arrays are references so [1, 2, 3] == [1, 2, 3] is false because
  // they are two different references.
  same_as: func pure same_as(what: array?, compare_to: array?) {
    // Check lengths
    if Array.len(what) != Array.len(compare_to) {
      return false;
    }

    for i in 0.<Array.len(what) {
      // Check types
      if typeof what[i] != typeof compare_to[i] {
        return false;
      }

      // Check values
      if what[i] != compare_to[i] {
        return false;
      }
    }

    true;
  }
};