let tcp = __zephyr_native.create_tcp_stream;

let thing = tcp(.{
    url: "127.0.0.1:3000",
    presend: "GET /api/ping HTTP/1.1\r\nHost: 127.0.0.1\r\nConnection: close\r\n\r\n",
});

thing.event.on("receive", func (payload) {
    parse_http_response(payload).unwrap();
    debug parse_http_response("HTTP/1.1 200 GAY\r\n\r\n");
})

thing.event.on("close", func {
    debug "nini...";
});

func parse_http_response(data) {
    let main_body = data.split("\r\n\r\n");

    if $main_body < 2 {
        return Result.Err("Missing parts; there should be main and body section, but one is missing");
    }

    let main = main_body[0].split("\r\n");
    let body = main_body[1];

    let http_status_raw = main[0];
    let headers_raw = if $main != 1 { main[1..=(-1)] } else { [] };

    if !http_status_raw.starts_with("HTTP/") {
        return Result.Err("Invalid format; missing HTTP/");
    }
    let ver_status_parts = http_status_raw[($"HTTP/"-1)..=(-1)].join("").split(" ");
    if $ver_status_parts < 3 {
        return Result.Err("Invalid format; missing parts in status");
    }

    let http_version = ver_status_parts[0];
    let http_status = ver_status_parts[1];
    let http_status_text = ver_status_parts[2..=(-1)].join(" ");

    let headers = .{};

    for _, raw_header in headers_raw {
        let parts = raw_header.split(": ");

        if $parts < 2 {
            continue;
        }

        let key = parts[0];
        let value = parts[1..=(-1)].join(": ");

        headers[key] = value;
    }

    return Result.Ok(.{
        headers,
        body,
        http: .{
            version: http_version,
            status: http_status,
            status_text: http_status_text
        }
    })
}